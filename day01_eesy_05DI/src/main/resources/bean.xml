<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- id:表示对象 class得到对象-->
<!--    spring中得依赖注入
        Dependency Injection

        IOC的作用：将需要用到其他类得对象时都用spring为我们提供，我们只需要在配置文件中说明依赖关系得维护
        就称为依赖注入；就能减低程序间的耦合性

        依赖注入：
        三类：1：基本数据类型和String 2.其他bean类型 3.复杂类型/集合类型

        注入方式有三种：
        1.使用构造函数提供，
        2.使用set方法提供
        3.使用注解提供


-->
    <!--构造函数注入：
        使用的标签:constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
            name：用于指定给构造函数中指定名称的参数赋值                                        常用的
            =============以上三个用于指定给构造函数中哪个参数赋值===============================
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象

        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="zhenge" ></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="time"></constructor-arg>
    </bean>
<!--    让我们配置一个bean的时间对象-->
    <bean id="time" class="java.util.Date"></bean>

<!--    set方法注入（比较常用的方法）
        标签：property
        出现位置：bean标签内部
        标签属性：
        name
        value
        ref

        优点：创建对象时没有明确对象，可以直接使用默认构造函数

        缺点：如果有某个值，则获取对象时有可能set方法没有执行
-->
    <bean id="accountService02" class="com.itheima.service.impl.AccountServiceImpl02">
        <property name="name" value="luanluan"></property>
        <property name="age" value="12"></property>
        <property name="birthday" ref="time"></property>
    </bean>

    <!--    复杂类型的注入 集合类型的注入
            用于给list结构集合注入标签list array set

            用于给Map结构集合注入的标签 map props
            当结构相同时标签可以相互互换
    -->
        <bean id="accountService03" class="com.itheima.service.impl.AccountServiceImpl03">
            <property name="myList">
                <list>
                    <value>AAA</value>
                    <value>BBB</value>
                    <value>CCC</value>
                </list>
            </property>
            <property name="myStrs">
                <set>
                    <value>AAA</value>
                    <value>BBB</value>
                    <value>CCC</value>
                </set>
            </property>


            <property name="mySet">
                <list>
                    <value>AAA</value>
                    <value>BBB</value>
                    <value>CCC</value>
                </list>
            </property>

<!--            <property name="myMap">-->
<!--                <props>-->
<!--                    <prop key="testC">ccc</prop>-->
<!--                    <prop key="testD">ddd</prop>-->
<!--                </props>-->
<!--            </property>-->

            <property name="myProps">
                <map>
                    <entry key="testA" value="aaa"></entry>
                    <entry key="testB">
                        <value>BBB</value>
                    </entry>
                </map>
            </property>
        </bean>




</beans>